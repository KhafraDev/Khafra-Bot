import fetch from 'node-fetch';

// Generated by https://quicktype.io

export interface Docs {
    meta:       DocsMeta;
    custom:     Custom;
    classes:    Class[];
    interfaces: any[];
    typedefs:   Typedef[];
    externals:  External[];
}

export interface Class {
    name:         string;
    description?: string;
    extends?:     Array<Array<string[]>>;
    props?:       ClassProp[];
    methods?:     Method[];
    meta:         EventMeta;
    construct?:   Construct;
    events?:      Event[];
    implements?:  Array<Array<string[]>>;
    access?:      Access;
    abstract?:    boolean;
}

export enum Access {
    Private = "private",
}

export interface Construct {
    name:   string;
    params: ConstructParam[];
}

export interface ConstructParam {
    name:        string;
    description: string;
    optional?:   boolean;
    type:        Array<Array<string[]>>;
    default?:    boolean | number | null | string;
}

export interface Event {
    name:        string;
    description: string;
    params?:     EventParam[];
    meta:        EventMeta;
}

export interface EventMeta {
    line: number;
    file: string;
    path: Path;
}

export enum Path {
    SrcClient = "src/client",
    SrcClientActions = "src/client/actions",
    SrcClientVoice = "src/client/voice",
    SrcClientVoiceDispatcher = "src/client/voice/dispatcher",
    SrcClientVoiceNetworking = "src/client/voice/networking",
    SrcClientVoicePlayer = "src/client/voice/player",
    SrcClientVoiceReceiver = "src/client/voice/receiver",
    SrcClientVoiceUtil = "src/client/voice/util",
    SrcClientWebsocket = "src/client/websocket",
    SrcClientWebsocketHandlers = "src/client/websocket/handlers",
    SrcManagers = "src/managers",
    SrcREST = "src/rest",
    SrcSharding = "src/sharding",
    SrcStructures = "src/structures",
    SrcStructuresInterfaces = "src/structures/interfaces",
    SrcUtil = "src/util",
}

export interface EventParam {
    name:         string;
    description?: string;
    type:         Array<Array<string[] | ReturnEnum>>;
    nullable?:    boolean;
    variable?:    boolean;
}

export enum ReturnEnum {
    Empty = "*",
}

export interface Method {
    name:        string;
    description: string;
    meta:        EventMeta;
    params?:     ParamElement[];
    returns?:    Array<Array<string[] | ReturnEnum>> | ReturnsClass;
    examples?:   string[];
    async?:      boolean;
    access?:     Access;
    inherits?:   string;
    inherited?:  boolean;
    implements?: string[];
    scope?:      Scope;
    see?:        string[];
    emits?:      string[];
    abstract?:   boolean;
}

export interface ParamElement {
    name:        string;
    description: string;
    type:        Array<Array<string[] | ReturnEnum>>;
    variable?:   boolean;
    optional?:   boolean;
    default?:    boolean | number | null | string;
    nullable?:   boolean;
}

export interface ReturnsClass {
    types:        Array<Array<string[] | ReturnEnum>>;
    description?: string;
    nullable?:    boolean;
}

export enum Scope {
    Static = "static",
}

export interface ClassProp {
    name:        string;
    description: string;
    access?:     Access;
    type:        Array<Array<string[]>>;
    meta:        EventMeta;
    readonly?:   boolean;
    nullable?:   boolean;
    props?:      PropProp[];
    scope?:      Scope;
    see?:        string[];
    abstract?:   boolean;
}

export interface PropProp {
    name:        string;
    description: string;
    type:        Array<Array<string[]>>;
    nullable?:   boolean;
}

export interface Custom {
    general:  General;
    topics:   Topics;
    examples: Examples;
}

export interface Examples {
    name:  string;
    files: ExamplesFiles;
}

export interface ExamplesFiles {
    ping:        Attachments;
    avatars:     Attachments;
    attachments: Attachments;
    greeting:    Attachments;
    embed:       Attachments;
    moderation:  Attachments;
    webhook:     Attachments;
}

export interface Attachments {
    name:    string;
    type:    PurpleType;
    content: string;
    path:    string;
}

export enum PurpleType {
    JS = "js",
    Md = "md",
}

export interface General {
    name:  string;
    files: GeneralFiles;
}

export interface GeneralFiles {
    welcome:  Attachments;
    updating: Attachments;
    faq:      Attachments;
}

export interface Topics {
    name:  string;
    files: TopicsFiles;
}

export interface TopicsFiles {
    voice:    Attachments;
    web:      Attachments;
    partials: Attachments;
}

export interface External {
    name: string;
    see:  string[];
    meta: EventMeta;
}

export interface DocsMeta {
    generator: string;
    format:    number;
    date:      number;
}

export interface Typedef {
    name:         string;
    description?: string;
    type:         Array<Array<string[] | ReturnEnum>>;
    props?:       ParamElement[];
    meta:         EventMeta;
    params?:      EventParam[];
    returns?:     Array<Array<string[]>>;
}

// 'meta' | 'custom' | 'classes' | 'interfaces' | 'typedefs' | 'externals'
export const docsLookup: Record<string, string[]> = {
    classes:    Array<string>(),
    interfaces: Array<string>(),
    typedefs:   Array<string>(),
    externals:  Array<string>()
};

export let docs: Record<string, Docs['classes' | 'interfaces' | 'typedefs' | 'externals']>;

export const fetchDocs = async () => {
    let res;
    while(!res) {
        try {
            res = await fetch('https://raw.githubusercontent.com/discordjs/discord.js/docs/v12.json', {
                headers: {
                    'Content-Type': 'application/json'
                }
            });
        } catch {}
    }
    const json = await res.json();

    for(const key in json) {
        if(key === 'custom' || key === 'meta') {
            continue;
        }

        for(const item of json[key]) {
            docsLookup[key].push(item.name);
        }
    }

    docs = json;
}